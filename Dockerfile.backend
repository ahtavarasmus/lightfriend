# Build stage
FROM rust:1.85-slim as builder

# Install system deps for OpenSSL linking + diesel CLI deps
RUN apt-get update && \
    apt-get install -y pkg-config libssl-dev build-essential libsqlite3-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app/backend

# Low-memory Cargo flags (works on any architecture)
ENV CARGO_BUILD_JOBS=1
ENV RUSTFLAGS="-C codegen-units=16 -C lto=off -C opt-level=2"

# Install diesel_cli for migrations
RUN cargo install diesel_cli --no-default-features --features sqlite

# Copy backend manifests first for dep caching
COPY backend/Cargo.toml backend/Cargo.lock* ./

# Dummy main.rs for dep resolution (binary crate like Axum)
RUN mkdir -p src && \
    echo 'fn main() { println!("dummy build"); }' > src/main.rs

# Install deps only (caches target/ for next layers)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/backend/target \
    cargo build --release

# Copy real backend source (overwrites dummy)
COPY backend/src ./src
COPY backend/diesel.toml ./
COPY backend/migrations ./migrations

# Full build with real code (uses cached deps)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/backend/target \
    cargo build --release && \
    cp /app/backend/target/release/backend /tmp/backend

# Runtime stage
FROM debian:bookworm-slim

# Install runtime deps (Ubuntu/Debian compatible)
RUN apt-get update && \
    apt-get install -y ca-certificates libssl3 libsqlite3-0 wget openssl bash && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy binary and diesel CLI from builder
COPY --from=builder /tmp/backend /usr/local/bin/backend
COPY --from=builder /usr/local/cargo/bin/diesel /usr/local/bin/diesel

# Copy static files, migrations, and diesel config
COPY backend/static ./static
COPY backend/migrations ./migrations
COPY backend/diesel.toml ./diesel.toml

# Copy init script
COPY init.sh /usr/local/bin/init.sh
RUN chmod +x /usr/local/bin/init.sh

# Create data directories
RUN mkdir -p /app/data /app/uploads

# Set volumes for persistence
VOLUME ["/app/data", "/app/uploads"]

# Expose internal port
EXPOSE 3100

# Use init script as entrypoint
CMD ["/usr/local/bin/init.sh"]
